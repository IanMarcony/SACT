openapi: 3.0.0

servers:
  - description: Development server URL
    url: http://127.0.0.1:3333/
  - description: Production test server URL
    url: https://prod.api-sact-test.com/

info:
  description: HTTP Requests guide to utilize the SACT API.
  version: "1.0.0"
  title: SACT API

tags:
  - name: admins authentication
  - name: admins
  - name: evaluators authentication
  - name: evaluators
  - name: projects
  - name: questions
  - name: avaliations
  - name: grades
  - name: reports

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: JWT token is missing
    IncorrectToken:
      description: Invalid JWT token
  schemas:
    Admin:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        ra:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    Evaluator:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        occupation_area:
          type: string
        institution:
          type: string
        phone_number:
          type: string
        email:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    Project:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        occupation_area:
          type: string
        classroom:
          type: string
        members:
          type: string
        observations:
          type: string
        image:
          type: string
          format: binary
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    Question:
      properties:
        id:
          type: string
          format: uuid
        section:
          type: string
        criterion:
          type: string
        min_grade:
          type: integer
        max_grade:
          type: integer
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    Avaliation:
      properties:
        id:
          type: string
          format: uuid
        evaluator_id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        comments:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    Grade:
      properties:
        id:
          type: string
          format: uuid
        avaliation_id:
          type: string
          format: uuid
        question_id:
          type: string
          format: uuid
        grade:
          type: number
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat

paths:
  /admins/sessions:
    post:
      summary: Creates an admin session.
      tags:
        - admins authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ra:
                  type: string
                  example: "111111"
                password:
                  type: string
                  example: "admin password"
      responses:
        '200':
          description: Returns a JSON containing the admin data and a JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  admin:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                      name:
                        type: string
                        example: "Admin Name"
                      ra:
                        type: string
                        example: "111111"
                      email:
                        type: string
                        format: email
                        example: "admin@email.com"
                      created_at:
                        type: string
                        format: dateformat
                        example: "2020-07-02T21:57:00.421Z"
                      updated_at:
                        type: string
                        format: dateformat
                        example: "2020-07-02T21:57:00.421Z"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1OTcxMTQ0MDgsImV4cCI6MTU5NzIwMDgwOCwic3ViIjoiMWEwMWY3ZmYtYzZlMy00M2NiLThiNzQtY2YxOWVhZDYyMDdhIn0.P_NlcLb0Ob6j9pC6DxDJiF2q7Xrx6qqWkgOcUgqCpro"
        '401':
          description: 'Incorrect login/password combination.'
  /admins/password/forgot:
    post:
      summary: Generates a token for password recovering.
      tags:
        - admins authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ra:
                  type: string
                  example: "111111"
      responses:
        '204':
          description: Confirmation of token sent to email successfully.
        '400':
          description: Admin does not exists.
  /admins/password/reset:
    post:
      summary: Resets the admin password.
      tags:
        - admins authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "new admin password"
                password_confirmation:
                  type: string
                  example: "new admin password"
                token:
                  type: string
                  format: uuid
                  example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
      responses:
        '204':
          description: Confirmation of admin password changed successfully.
        '400':
          description: Token expired | Admin token doesn't not exists.

  /admins:
    post:
      summary: Creates an admin.
      tags:
        - admins
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Admin Name"
                  ra:
                    type: string
                    example: "111111"
                  email:
                    type: string
                    format: email
                    example: "admin@email.com"
                  password:
                    type: string
                    example: "admin password"
      responses:
        '200':
          description: Returns a JSON containing the created admin.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "Admin Name"
                  ra:
                    type: string
                    example: "111111"
                  email:
                    type: string
                    format: email
                    example: "admin@email.com"
                  password:
                    type: string
                    example: "admin password"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
  /admins/{id}:
    put:
      summary: Updates an admin.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Admin id to update it.
      tags:
        - admins
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "New Admin Name"
                  ra:
                    type: string
                    example: "111111"
                  email:
                    type: string
                    format: email
                    example: "newadmin@email.com"
                  password:
                    type: string
                    example: "new admin password"
      responses:
        '200':
          description: Returns a JSON containing the updated admin.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "New Admin Name"
                  ra:
                    type: string
                    example: "111111"
                  email:
                    type: string
                    format: email
                    example: "newadmin@email.com"
                  password:
                    type: string
                    example: "admin password"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Deletes an admin.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Admin id to delete it.
      tags:
        - admins
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a successfully deleted admin confirmation.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /admins/all:
    get:
      summary: Gets all admins.
      tags:
        - admins
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: A string to search for specific admins.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a JSON array containing all aministrators.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    name:
                      type: string
                      example: "Admin Name"
                    ra:
                      type: string
                      example: "111111"
                    email:
                      type: string
                      format: email
                      example: "admin@email.com"
                    password:
                      type: string
                      example: "admin password"
                    created_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
                    updated_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /evaluators/sessions:
    post:
      summary: Creates an evaluator session.
      tags:
        - evaluators authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "evaluator@email.com"
      responses:
        '200':
          description: Returns a JSON containing the evaluator data and a JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  evaluator:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                      name:
                        type: string
                        example: "Evaluator Name"
                      occupation_area:
                        type: string
                        example: "Evaluator Occupation Area"
                      institution:
                        type: string
                        example: "Evaluator Institution"
                      phone_number:
                        type: string
                        example: "(999)99999-9999"
                      email:
                        type: string
                        format: email
                        example: "evaluator@email.com"
                      status:
                        type: string
                        example: "to_evaluate"
                      created_at:
                        type: string
                        format: dateformat
                        example: "2020-07-02T21:57:00.421Z"
                      updated_at:
                        type: string
                        format: dateformat
                        example: "2020-07-02T21:57:00.421Z"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1OTcxMTQ0MDgsImV4cCI6MTU5NzIwMDgwOCwic3ViIjoiMWEwMWY3ZmYtYzZlMy00M2NiLThiNzQtY2YxOWVhZDYyMDdhIn0.P_NlcLb0Ob6j9pC6DxDJiF2q7Xrx6qqWkgOcUgqCpro"
        '401':
          description: 'Incorrect Email.'
  /evaluators:
    post:
      summary: Creates an evaluator.
      tags:
        - evaluators
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Evaluator Name"
                  occupation_area:
                    type: string
                    example: "Evaluator Occupation Area"
                  institution:
                    type: string
                    example: "Evaluator Institution"
                  phone_number:
                    type: string
                    example: "(999)99999-9999"
                  email:
                    type: string
                    format: email
                    example: "evaluator@email.com"
      responses:
        '200':
          description: Returns a JSON containing the created evaluator.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "Evaluator Name"
                  occupation_area:
                    type: string
                    example: "Evaluator Occupation Area"
                  institution:
                    type: string
                    example: "Evaluator Institution"
                  phone_number:
                    type: string
                    example: "(999)99999-9999"
                  email:
                    type: string
                    format: email
                    example: "evaluator@email.com"
                  status:
                    type: string
                    example: "to_evaluate"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
  /evaluators/{id}:
    put:
      summary: Updates an evaluator.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Evaluator id to update it.
      tags:
        - evaluators
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "New Evaluator Name"
                  occupation_area:
                    type: string
                    example: "New Evaluator Occupation Area"
                  institution:
                    type: string
                    example: "New Evaluator Institution"
                  phone_number:
                    type: string
                    example: "(999)99999-9999"
                  email:
                    type: string
                    format: email
                    example: "newevaluator@email.com"
      responses:
        '200':
          description: Returns a JSON containing the updated evaluator.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "New Evaluator Name"
                  occupation_area:
                    type: string
                    example: "New Evaluator Occupation Area"
                  institution:
                    type: string
                    example: "New Evaluator Institution"
                  phone_number:
                    type: string
                    example: "(999)99999-9999"
                  email:
                    type: string
                    format: email
                    example: "newevaluator@email.com"
                  status:
                    type: string
                    example: "to_evaluate"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Deletes an evaluator.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Evaluator id to delete it.
      tags:
        - evaluators
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a successfully deleted evaluator confirmation.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /evaluators/all:
    get:
      summary: Gets all evaluators.
      tags:
        - evaluators
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: A string to search for specific evaluators.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a JSON array containing all evaluators.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    name:
                      type: string
                      example: "Evaluator Name"
                    occupation_area:
                      type: string
                      example: "Evaluator Occupation Area"
                    institution:
                      type: string
                      example: "Evaluator Institution"
                    phone_number:
                      type: string
                      example: "(999)99999-9999"
                    email:
                      type: string
                      format: email
                      example: "evaluator@email.com"
                    status:
                      type: string
                      example: "to_evaluate"
                    created_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
                    updated_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /projects:
    post:
      summary: Creates a project.
      tags:
        - projects
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Project Name"
                  description:
                    type: string
                    example: "Project description"
                  occupation_area:
                    type: string
                    example: "Project Occupation Area"
                  classroom:
                    type: string
                    example: "Classroom 1"
                  members:
                    type: string
                    example: "Member 1, Member 2, Member 3"
                  observations:
                    type: string
                    example: "Project observations"
      responses:
        '200':
          description: Returns a JSON containing the created project.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "Project Name"
                  description:
                    type: string
                    example: "Project description"
                  occupation_area:
                    type: string
                    example: "Project Occupation Area"
                  classroom:
                    type: string
                    example: "Classroom 1"
                  members:
                    type: string
                    example: "Member 1, Member 2, Member 3"
                  observations:
                    type: string
                    example: "Project observations"
                  image_url:
                    type: string
                    example: null
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
  /projects/{id}:
    put:
      summary: Updates a project.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Project id to update it.
      tags:
        - projects
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "New Project Name"
                  description:
                    type: string
                    example: "Project description"
                  occupation_area:
                    type: string
                    example: "New Project Occupation Area"
                  classroom:
                    type: string
                    example: "Classroom 2"
                  members:
                    type: string
                    example: "Member 1, Member 2, Member 3"
                  observations:
                    type: string
                    example: "New Project observations"
      responses:
        '200':
          description: Returns a JSON containing the updated project.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "New Project Name"
                  description:
                    type: string
                    example: "Project description"
                  occupation_area:
                    type: string
                    example: "New Project Occupation Area"
                  classroom:
                    type: string
                    example: "Classroom 2"
                  members:
                    type: string
                    example: "Member 1, Member 2, Member 3"
                  observations:
                    type: string
                    example: "New Project observations"
                  image_url:
                    type: string
                    example: "https://image_upload_provider/2196cf1aec2f18533aaf-file_name.png"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Deletes a project.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Project id to delete it.
      tags:
        - projects
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a successfully deleted project confirmation.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /projects/{id}/image:
    patch:
      summary: Updates the project image.
      tags:
        - projects
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Project id to update it.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Returns a JSON containing the updated project with image.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "Project Name"
                  description:
                    type: string
                    example: "Project description"
                  occupation_area:
                    type: string
                    example: "Project Occupation Area"
                  classroom:
                    type: string
                    example: "Classroom 1"
                  members:
                    type: string
                    example: "Member 1, Member 2, Member 3"
                  observations:
                    type: string
                    example: "Project observations"
                  image_url:
                    type: string
                    example: "https://image_upload_provider/2196cf1aec2f18533aaf-file_name.png"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /projects/all:
    get:
      summary: Gets all projects.
      tags:
        - projects
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: A string to search for specific projects.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a JSON array containing all projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    name:
                      type: string
                      example: "Project Name"
                    description:
                      type: string
                      example: "Project description"
                    occupation_area:
                      type: string
                      example: "Project Occupation Area"
                    classroom:
                      type: string
                      example: "Classroom 1"
                    members:
                      type: string
                      example: "Member 1, Member 2, Member 3"
                    observations:
                      type: string
                      example: "Project observations"
                    image_url:
                      type: string
                      example: "https://image_upload_provider/2196cf1aec2f18533aaf-file_name.png"
                    created_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
                    updated_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /questions:
    post:
      summary: Creates a question.
      tags:
        - questions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  section:
                    type: string
                    example: "Section Name"
                  criterion:
                    type: string
                    example: "Criterion Name"
                  min_grade:
                    type: integer
                    example: 6
                  max_grade:
                    type: integer
                    example: 10
      responses:
        '200':
          description: Returns a JSON containing the created question.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  section:
                    type: string
                    example: "Section Name"
                  criterion:
                    type: string
                    example: "Criterion Name"
                  min_grade:
                    type: integer
                    example: 6
                  max_grade:
                    type: integer
                    example: 10
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
  /questions/{id}:
    put:
      summary: Updates a question.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Question id to update it.
      tags:
        - questions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  section:
                    type: string
                    example: "Section Name"
                  criterion:
                    type: string
                    example: "Criterion Name"
                  min_grade:
                    type: integer
                    example: 6
                  max_grade:
                    type: integer
                    example: 10
      responses:
        '200':
          description: Returns a JSON containing the updated question.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  section:
                    type: string
                    example: "Section Name"
                  criterion:
                    type: string
                    example: "Criterion Name"
                  min_grade:
                    type: integer
                    example: 6
                  max_grade:
                    type: integer
                    example: 10
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Deletes a question.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Question id to delete it.
      tags:
        - questions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a successfully deleted question confirmation.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /questions/all:
    get:
      summary: Gets all questions.
      tags:
        - questions
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: A string to search for specific questions.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a JSON array containing all questions.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    section:
                      type: string
                      example: "Section Name"
                    criterion:
                      type: string
                      example: "Criterion Name"
                    min_grade:
                      type: integer
                      example: 6
                    max_grade:
                      type: integer
                      example: 10
                    created_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
                    updated_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /avaliations:
    post:
      summary: Creates an avaliation set.
      tags:
        - avaliations
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  evaluator_id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  projects:
                    type: array
                    items:
                      type: object
                      properties:
                        project_id:
                          type: string
                          format: uuid
                          example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
      responses:
        '200':
          description: Returns a JSON containing the created avaliation set.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    evaluator_id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    project_id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    status:
                      type: string
                      example: "to_evaluate"
                    created_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
                    updated_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
  /avaliations/{id}:
    put:
      summary: Updates an avaliation.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Avaliation id to update it.
      tags:
        - avaliations
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  evaluator_id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  project_id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
      responses:
        '200':
          description: Returns a JSON containing the updated avaliation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  evaluator_id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  project_id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  status:
                    type: string
                    example: "to_evaluate"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Deletes an avaliation.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Avaliation id to delete it.
      tags:
        - avaliations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a successfully deleted avaliation confirmation.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /avaliations/all:
    get:
      summary: Gets all avaliations.
      tags:
        - avaliations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a JSON array containing all avaliatons.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    evaluator_id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    project_id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    project:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                        name:
                          type: string
                          example: "Project Name"
                        description:
                          type: string
                          example: "Project description"
                        occupation_area:
                          type: string
                          example: "Project Occupation Area"
                        classroom:
                          type: string
                          example: "Classroom 1"
                        members:
                          type: string
                          example: "Member 1, Member 2, Member 3"
                        observations:
                          type: string
                          example: "Project observations"
                        image_url:
                          type: string
                          example: null
                        created_at:
                          type: string
                          format: dateformat
                          example: "2020-07-02T21:57:00.421Z"
                        updated_at:
                          type: string
                          format: dateformat
                          example: "2020-07-02T21:57:00.421Z"
                    status:
                      type: string
                      example: "to_evaluate"
                    created_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
                    updated_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /avaliations/{evaluator_id}:
    get:
      summary: Gets all avaliations by evaluator id.
      tags:
        - avaliations
      parameters:
        - in: path
          name: evaluator_id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Evaluator id to reference the avaliations.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a JSON array containing all avaliatons.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    evaluator_id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    project_id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    project:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                        name:
                          type: string
                          example: "Project Name"
                        description:
                          type: string
                          example: "Project description"
                        occupation_area:
                          type: string
                          example: "Project Occupation Area"
                        classroom:
                          type: string
                          example: "Classroom 1"
                        members:
                          type: string
                          example: "Member 1, Member 2, Member 3"
                        observations:
                          type: string
                          example: "Project observations"
                        image_url:
                          type: string
                          example: null
                        created_at:
                          type: string
                          format: dateformat
                          example: "2020-07-02T21:57:00.421Z"
                        updated_at:
                          type: string
                          format: dateformat
                          example: "2020-07-02T21:57:00.421Z"
                    status:
                      type: string
                      example: "to_evaluate"
                    created_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
                    updated_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /grades:
    post:
      summary: Creates a set of grades.
      tags:
        - grades
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avaliation_id:
                  type: string
                  format: uuid
                  example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                comments:
                  type: string
                  example: "Comments about the project"
                grades:
                  type: array
                  items:
                    type: object
                    properties:
                      question_id:
                        type: string
                        format: uuid
                        example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                      grade:
                        type: number
                        example: 6.0
      responses:
        '204':
          description: Confirmation of successfully project avaliation.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /grades/{avaliation_id}:
    get:
      summary: Gets all grades by avaliation id.
      tags:
        - grades
      parameters:
        - in: path
          name: avaliation_id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Avaliation id to reference the grades.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a JSON array containing all grades.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    avaliation_id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    question_id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    grade:
                      type: number
                      example: 6.0
                    created_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
                    updated_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /reports/general:
    get:
      summary: Gets the general ranking report.
      tags:
        - reports
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Returns a PDF URL containing the general ranking report.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /reports/course:
    get:
      summary: Gets the ranking report by course.
      tags:
        - reports
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Returns a PDF URL containing the ranking report by course.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /reports/detailed:
    get:
      summary: Gets the detailed ranking report.
      tags:
        - reports
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Returns a PDF URL containing the detailed ranking report.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
